diff --git a/shell_integration/libcloudproviders/CMakeLists.txt b/shell_integration/libcloudproviders/CMakeLists.txt
index 02035d863..ba2438305 100644
--- a/shell_integration/libcloudproviders/CMakeLists.txt
+++ b/shell_integration/libcloudproviders/CMakeLists.txt
@@ -26,6 +26,7 @@ endmacro(libcloudproviders_add_config _sources)
 
 
 if (Qt6_FOUND)
+    set(QT_NO_CREATE_VERSIONLESS_TARGETS TRUE)
     find_package(Qt6 COMPONENTS COMPONENTS DBus)
 else()
     set(REQUIRED_QT_VERSION "5.15.0")
diff --git a/src/CMakeLists.txt b/src/CMakeLists.txt
index fe9d4d9af..7389f20c7 100644
--- a/src/CMakeLists.txt
+++ b/src/CMakeLists.txt
@@ -1,6 +1,6 @@
 include(ECMEnableSanitizers)
 
-set(REQUIRED_QT_VERSION "6.5.0")
+set(REQUIRED_QT_VERSION "6.4.2")
 
 find_package(Qt${QT_MAJOR_VERSION}Core ${REQUIRED_QT_VERSION} CONFIG QUIET)
 set_package_properties(Qt${QT_MAJOR_VERSION}Core PROPERTIES
diff --git a/src/libsync/theme.cpp b/src/libsync/theme.cpp
index 11c8982bf..c48cf625e 100644
--- a/src/libsync/theme.cpp
+++ b/src/libsync/theme.cpp
@@ -25,8 +25,6 @@
 #include <QStyle>
 #include <QApplication>
 #endif
-#include <QGuiApplication>
-#include <QStyleHints>
 #include <QSslSocket>
 #include <QSvgRenderer>
 #include <QPainter>
@@ -928,7 +926,7 @@ void Theme::connectToPaletteSignal()
 {
     if (!_paletteSignalsConnected) {
         if (const auto ptr = qobject_cast<QGuiApplication *>(QGuiApplication::instance())) {
-            connect(ptr->styleHints(), &QStyleHints::colorSchemeChanged, this, &Theme::darkModeChanged);
+            connect(ptr, &QGuiApplication::paletteChanged, this, &Theme::darkModeChanged);
             _paletteSignalsConnected = true;
         }
     }
@@ -937,17 +935,18 @@ void Theme::connectToPaletteSignal()
 bool Theme::darkMode()
 {
     connectToPaletteSignal();
-    switch (qGuiApp->styleHints()->colorScheme())
-    {
-    case Qt::ColorScheme::Dark:
+// Windows: Check registry for dark mode
+#if defined(Q_OS_WIN)
+    const auto darkModeSubkey = QStringLiteral("Software\\Microsoft\\Windows\\CurrentVersion\\Themes\\Personalize");
+    if (Utility::registryKeyExists(HKEY_CURRENT_USER, darkModeSubkey) &&
+        !Utility::registryGetKeyValue(HKEY_CURRENT_USER, darkModeSubkey, QStringLiteral("AppsUseLightTheme")).toBool()) {
         return true;
-    case Qt::ColorScheme::Light:
-        return false;
-    case Qt::ColorScheme::Unknown:
-        return Theme::isDarkColor(QGuiApplication::palette().window().color());
     }
 
     return false;
+#else
+    return Theme::isDarkColor(QGuiApplication::palette().window().color());
+#endif
 }
 
 void Theme::setOverrideServerUrl(const QString &overrideServerUrl)
